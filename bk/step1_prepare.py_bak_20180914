#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
version:2.6
by:lss
"""

import numpy as np
import pandas as pd
import sys
reload(sys)
sys.setdefaultencoding("utf8")
import os
import re
from prepare import *

import shutil
#shutil.copyfile('/DATA/sslyu/trio_BWA-GATK_2.7/sub.sh', 'sub.sh')

kwargs_raw = sys.argv[1:]
kwargs={'-sn':'', '-l':''}
for i in range(len(kwargs_raw)):
	for j in kwargs.keys():
		if(kwargs_raw[i]==j):
			kwargs.update({j:kwargs_raw[i+1]})

#filelist = os.listdir('.')
#list = []
#for i in filelist:
#    if 'xlsx.tmp' in i:
#        list.append(i)
#        break
#    elif '分析任务单' in i and 'tmp' not in i:
#    	list.append(i)
#    elif '产品信息表' in i and 'tmp' not in i:
#    	list.append(i)

#read sample list
if(kwargs.get('-sn')!=''):
    list=[]
    list.append(kwargs.get('-sn'))
    print "\nNote:sigle sample mode"
else:
    if kwargs.get('-l')!='':
        list=pd.read_table(kwargs.get('-l'),header=None)[0].tolist()
        print "\nNote:list samples mode"

if len(list) != 0:
    os.system('cp /DATA/sslyu/trio_BWA-GATK_2.7/sub_{sep,list}.sh .')
    #os.system('ln -s /DATA/sslyu/trio_BWA-GATK_2.7/step*py .')
    for sn in list:
        strategy = raw_input('strategy(WES PANEL Agilent-PANEL IDT-PANEL Agilent-wes brain blood-disease, if not exist, please enter none):')
        generate_dbevn(strategy)
        if 'tmp' in sn:
            d1 = pd.read_table(sn, dtype=str, encoding='utf-8')
        else:
            d1 = append_sample_gender_excel(sn)
            print d1
            print unicode(d1.columns, 'utf-8')
            header_truth = raw_input('Is the header true, Reads(M) bases(Mb) Q30, if not, please enter the wrong ones:')
            if header_truth != '':
                wrong_header = header_truth.split(' ')
                right_header = raw_input('Please enter the right ones:')
                right_header = right_header.split(' ')
                for i in range(len(wrong_header)):
                    d1.rename(columns={wrong_header[i]:right_header[i]}, inplace=True)
            statistics = raw_input('Reads(M) bases(Mb) Q30 need?')
            if statistics != 'no':
                os.system('python /DATA/sslyu/trio_BWA-GATK_3.0/fqstat.py -sn '+sn)

            print d1[[u'姓名', u'性别', 'sample']]
            d1 = append_relation(d1)
            d1 = append_pedigree(d1)
            d1 = append_phenotype(d1)
            d1 = append_father_mother(d1)
            if u')' in sn:
                infile = sn.split(')')[0]+u'）'+sn.split(')')[1]
            else:
                infile = sn
            d1.to_csv(infile+'.tmp', index=None, sep="\t", encoding='utf-8') #Maybe the encoding should be considered?
        print d1
##################################################################################        
        pedigree_dict = generate_pedigree(d1)
        trio = generate_trio(pedigree_dict)

        ofile = open('step1_prepare.sh', 'a')
#############################################################################################################        
        cp_judgement = raw_input('Do you need to copy the raw data? If not, please enter no:')
        if cp_judgement != 'no':
            ID = d1['sample']
            ofile.write('mkdir raw\n')
            #rawdata_dir = raw_input('Please enter the absolute path of the raw data:')
            #os.system('ls '+rawdata_dir)
            ##print os.listdir(rawdata_dir)
            #origin = raw_input('please enter the pattern of R1 and R2:')
            
                #ofile = open('fqstat.sh', 'w')
                #for i in d1.index:
                #    for j in [u'Reads(M)', u'bases(Mb)', u'Q30']:
                #        if d1.loc[i][j] == 'nan':
                #            ofile.write('/home/ana005/anaconda2/bin/iTools Fqtools stat -InFq '+rawdata_dir+i+'/*'+pattern.split()[0]+'* -InFq '+rawdata_dir+i+'/*'+pattern.split()[1]+'* -OutStat raw/'+d1.loc[i]['sample']+'.info\n')
                #            break
                #ofile.close()

            redo_judgement = raw_input('Is this a redo job or not? If not, please enter no:')
            if redo_judgement == 'no':
                rawdata_dir = raw_input('Please enter the absolute path of the raw data:')
                os.system('ls '+rawdata_dir)
                origin = raw_input('please enter the pattern of R1 and R2:')
                ofile.write('a=('+' '.join(d1[u'样本编号'])+')\n')
                ofile.write('c=('+' '.join(origin.split(' '))+')\n')
                n = str(len(d1[u'样本编号']))
                md5 = raw_input('please enter the absolute path of the md5 file:')
                ofile.write('for i in `seq '+n+'`; do mkdir -p raw/bk/${a[$i-1]}; awk \'{if(match($2,\"\'${a[$i-1]}\'\")){print $0}}\' '+md5+' > raw/bk/${a[$i-1]}/${a[$i-1]}.md5; for j in `seq 2`; do cp '+rawdata_dir+'/*${a[$i-1]}*${c[$j-1]}* raw/bk/${a[$i-1]}; done; done\n')
                for i in range(len(d1[u'样本编号'])):
                	for j in range(2):
                		ofile.write('cp '+rawdata_dir+'/*'+d1[u'样本编号'][i]+'*'+origin.split(' ')[j]+'* raw/'+ID[i]+'_R'+str(j+1)+'.fastq.gz;')
                	ofile.write('\n')
            else:
                parent_raw_dir = raw_input('please enter the parent directory')
                for i in d1[u'样本编号']:
                    #rawdata_dir = '/anaData/anaData004/children_hos_genetic/rawdata/2018/'+strategy+'/'
                    raw_dir = parent_raw_dir+strategy+'/'
                    os.system('ls '+rawdata_dir)
                origin = raw_input('please enter the pattern of R1 and R2:')
            	for i in range(len(d1[u'样本编号'])):
            		for j in range(2):
            			ofile.write('cp '+rawdata_dir+'/'+d1[u'样本编号'][i]+'/*'+origin.split(' ')[j]+'* raw/'+ID[i]+'_R'+str(j+1)+'.fastq.gz;')
            		ofile.write('\n')
        ofile.close()
####################################################################################################                
        
        if len(trio) > 0:
            os.system('mkdir -p trio/{gvcf,ped}')
            os.system('cp /DATA/sslyu/trio_BWA-GATK_2.7/trio/gvcf.py trio')
        #    #os.system('cp -r /DATA/sslyu/trio_BWA-GATK_2.7/trio/ .')
        
        for i in d1['sample']:
        	if not os.path.exists(str(i)):
        		os.mkdir(str(i))
        if not os.path.exists('annotation'):
            os.mkdir('annotation')

        n = 0
        with open('/DATA/sslyu/trio_BWA-GATK_2.7/run2_sentieon.sh') as f:
        	for l in f:
        		n = n+1
        		if n>22 and n<=30:
        			print l

        single = generate_single(d1)
        if len(single) > 0:
            single_ID = [d1.loc[i]['sample'] for i in single]
            cmd_single = raw_input('select cmds from following for single (qc clean mapping precalling calling gvcf gtgvcf vqsr/hardfilt left-normalize annotation depth qcsum qcvcf): ')
            for i in single_ID:
            	generate_single_cmd(str(i))
            	generate_run2_sentieon(str(i),cmd_single)
                #os.system('sh sub_sep.sh '+i)
        if len(trio) > 0:
            cmd_trio = raw_input('select cmds from following for trio (qc clean mapping precalling gvcf depth qcsum): ')
            for k in pedigree_dict:
                trio_k_ID = []
                for i in pedigree_dict[k]:
                    trio_k_ID.append(d1.loc[i]['sample'])
                for i in trio_k_ID:
            		generate_cmd(str(i))
            		generate_run2_sentieon(str(i),cmd_trio)
                    #os.system('sh sub_sep.sh '+i)

##############################need to wait the last sub_sep.sh to complete############################                       
######## step2:trio_ped_analysis                    
#                generate_ped(k,d1)
#                generate_peddy(trio,d1)
#                k_ID = d1.loc[k]['sample']
#                mkdir -p trio/k_ID
#                for i in trio_K_ID:
#                    os.system('cp '+i+'/3_variants/gvcf/* trio/gvcf')
#                os.system('sh trio/sub_sep.sh '+k) 
#                os.system('sh trio/sub_sep.sh peddy')
##################################################################################################

        d1['sample'].to_csv('list'+str(list.index(sn)), header=None, index=None)
        os.system('cat list'+str(list.index(sn))+' >> list')
        os.system('rm list'+str(list.index(sn)))
else:
    print 'please offer an information excel, the name of the excel should include \"分析任务单\", the columns should be 样本编号 原始样本ID 姓名 性别 pedigree relation'
    sys.exit()

with open('dbevn.sh') as f:
    for l in f:
        print l.strip('\n')

os.system('sort list |uniq > tmp; mv tmp list')                
if os.path.getsize('step1_prepare.sh') == 0:
    os.system('rm step1_prepare.sh')
if os.path.exists('step1_prepare.sh'):    
    with open('step1_prepare.sh') as f:
    	for l in f:
    		print l.strip('\n')
    #truth = raw_input('Is the shell script correct? If not, please enter no: ')
    #if truth != '':
    #	sys.exit()
    #else:
    #	os.system('bash step1_prepare.sh')
