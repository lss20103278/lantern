#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
version:2.6
by:lss
"""

import numpy as np
import pandas as pd
import sys
reload(sys)
sys.setdefaultencoding("utf8")
import os
from prepare import *

kwargs_raw = sys.argv[1:]
kwargs = {'-sn':'', '-l':''}
for i in range(len(kwargs_raw)):
    for j in kwargs.keys():
        if kwargs_raw[i] == j:
            kwargs.update({j:kwargs_raw[i+1]})
            
#filelist = os.listdir('.')
#list = []
#seperator = []
#for i in filelist:
#    if 'xlsx.tmp' in i:
#        list.append(i)
#        if '分析任务单' in i:
#		    seperator.append('分析任务单')
#        elif '产品信息表' in i:
#            seperator.append('产品信息表')
#        break
#    elif '分析任务单' in i:
#        list.append(i)
#        seperator.append('分析任务单')
#    elif '产品信息表' in i:
#        list.append(i)
#        seperator.append('产品信息表')
##for i in filelist:
##    if '分析任务单' in i and 'tmp' not in i:
##        list.append(i)
##        seperator.append('分析任务单')
##    if '产品信息表' in i and 'tmp' not in i:
##        list.append(i)
##        seperator.append('产品信息表')

#read sample list
if(kwargs.get('-sn')!=''):
    list=[]
    list.append(kwargs.get('-sn'))
    print "\nNote:sigle sample mode"
    print unicode(list[0], 'utf-8')
    sep = raw_input('please enter the split characters:')
    seperator = []
    seperator.append(sep)
else:
    if kwargs.get('-l')!='':
        list=pd.read_table(kwargs.get('-l'),header=None)[0].tolist()
        print "\nNote:list samples mode"
        print list
        sep = raw_input('please enter the split characters of each file, seperated by space:')
        seperator = sep.split(' ')

if len(list) > 0:
    for sn in list:
        if 'tmp' in sn:
            d1 = pd.read_table(sn, dtype=str, encoding='utf-8')
            d1.index = d1[u'姓名']
        else:
            d1 = append_sample_gender_excel(sn)
            d1 = append_relation(d1)
            d1 = append_pedigree(d1)
            d1 = append_phenotype(d1)
            d1 = append_father_mother(d1)
            #infile = sn.split(')')[0]+u'）'+sn.split(')')[1]
            #d1.to_csv(infile+'.tmp', index=None, sep="\t", encoding='utf-8') # the coding of tmp file is problematic
        #if d1.shape[0] > 1:
        pedigree_dict = generate_pedigree(d1)
        trio = generate_trio(pedigree_dict)
        single = generate_single(d1)
        ped_v = []
        for j in d1[u'姓名']:
        	if j in single:
        		ped_v.append(0)
        	else:
        		ped_v.append(1)
        d1['pedigree'] = ped_v
        d1[u'分析流程'] = d1['pedigree'].map(lambda x:'single' if x==0 or x=='nan' else 'trio')
        
        d2 = pd.DataFrame(columns=['sample', '1Xcov', '20Xcov', 'AvgDepth', 'duplication'])
        for j in d1['sample']:
        	fn = j+'/2_mapping/'+j+'.qcsum'
        	qcsum = pd.read_table(fn)
        	d2 = pd.concat([d2,qcsum], ignore_index=True)
        d2.index = d2['sample']
        d2.to_csv('all.qcsum', sep="\t", index=None)
        
        d3 = pd.DataFrame(columns=['sample', 'indel_genomic', u'snp_genomic', u'ts/tv_genomic',u'snp_exonic', u'ts/tv_exonic'])
        qcvcf_list = []
        for j in d1[u'姓名'].tolist():
            print j
            if j in single:
                qcvcf_list.append(d1.loc[j]['sample'])
            elif j in trio:
                qcvcf_list.append(d1.loc[j]['sample'])
            else:
                continue
        d1.index = d1['sample']
        for j in qcvcf_list:
        	if d1.loc[j][u'姓名'] in single:
        		fn = j+'/3_variants/'+j+'.qcvcf'
        	else:
        		fn = 'trio/'+j+'/triotmp/'+j+'.qcvcf'
        	qcvcf = pd.read_table(fn)
        	d3 = pd.concat([d3,qcvcf], ignore_index=True)
        d3.index = d3['sample']
        
        if os.path.exists('all_fqstat'):
            d4 = pd.read_table('all_fqstat', index_col=0)
            #d1[[u'Reads(M)', u'bases(Gb)', u'Q30']] = d4[['Reads(M)','bases(Gb)','Q30']]
            d1[[u'Reads', u'bases(Gb)', u'Q30']] = d4[['Reads','bases(Gb)','Q30']]
        d1.index = d1['sample']	

        #d5 = pd.merge(d1[[u'批次', u'样本编号', u'sample', u'姓名', u'性别', u'年龄', u'样本间关系', u'科室', u'分析流程', u'Reads(M)', u'bases(Gb)', u'Q30', u'浓度(ng/ul)', u'体积(ul)', u'质量(ug)', u'OD260/OD280', u'OD260/OD230']], d2.drop(u'duplication', axis=1),on="sample")
        d5 = pd.merge(d1[[u'批次', u'样本编号', u'sample', u'姓名', u'性别', u'年龄', u'样本间关系', u'科室', u'分析流程', u'Reads', u'bases(Gb)', u'Q30', u'浓度(ng/ul)', u'体积(ul)', u'质量(ug)', u'OD260/OD280', u'OD260/OD230']], d2.drop(u'duplication', axis=1),on="sample")
        strategy = os.getcwd().split('/')[-1].split('_')[-1]
        print 'strategy: '+strategy
        truth = raw_input('Is the strategy right? If not, please enter it (WES IDT_PANEL Agilent_PANEL Agilent_wes ... ): ')
        if truth != '':
        	strategy = truth
        #l1 = ['sample', u'年龄', u'分析流程', 'vcf']
        #l2 = [u'策略', u'样本间关系', 'vcf', 'QC']
        #l3 = [strategy, relationship, 'available', u'合格']
        l1 = ['sample', u'分析流程', 'vcf']
        l2 = [u'策略', 'vcf', 'QC']
        l3 = [strategy, 'available', u'合格']
        for j in range(len(l1)):
        	d5.insert(d5.columns.tolist().index(l1[j])+1,l2[j],l3[j])
        col1 = d5.columns.tolist()[:12]+d5.columns.tolist()[20:]+d5.columns.tolist()[12:20]
        d6 = d5[col1]
        colname2 = d6.columns.tolist()
        colname2[2] = u'样本ID'
        colname2[8] = u'申请科室'
        colname2[12:15] = [u'1X_coverage(%)', u'20X_coverage(%)', u'ana_avg_depth(X)']
        d6.columns = colname2
        if 'tmp' in sn:
            ofile = sn.split(seperator[list.index(sn)])[0]+'交付信息表'+sn.split(seperator[list.index(sn)])[1][:-4]
        else:
            ofile = infile.split(seperator[list.index(sn)])[0]+'交付信息表'+infile.split(seperator[list.index(sn)])[1]
        wb=pd.ExcelWriter(ofile,engine='openpyxl')
        print d6
        d6.to_excel(wb,index=False)
        wb.save()
        
        d6 = pd.read_excel('/DATA/sslyu/trio_BWA-GATK_3.0/navicat.xlsx')
        if 'tmp' in sn:
            infile2 = sn.split(seperator[list.index(sn)])[0]+'交付信息表'+sn.split(seperator[list.index(sn)])[1][:-4]
        else:
            infile2 = infile.split(seperator[list.index(sn)])[0]+'交付信息表'+infile.split(seperator[list.index(sn)])[1]
        d5 = pd.read_excel(infile2)
        colname3 = d6.columns
        sample_n = d1.shape[0]
        start = raw_input('please enter the start number of this batch of samples in the database:')
        d6[u'order'] = range(int(start), int(start)+sample_n)
        #d6[[u'批次', u'样本编号', u'样本ID', u'策略', u'姓名', u'性别', u'年龄',u'样本间关系', u'申请科室',u'exp_reads',u'exp_bases(Mb)', u'exp_Q30', u'exp_浓度(ng/ul)', u'exp_体积(ul)',u'exp_质量(ug)', u'exp_OD260/OD280', u'exp_OD260/OD230', u'exp_QC结论',u'ana_qc_comment',u'ana_pepline', u'ana_vcf']] = d5[[u'批次', u'样本编号', u'样本ID', u'策略', u'姓名', u'性别', u'年龄',u'样本间关系', u'申请科室',u'Reads(M)',u'bases(Gb)',u'Q30',u'浓度(ng/ul)',u'体积(ul)',u'质量(ug)',u'OD260/OD280',u'OD260/OD230',u'QC',u'QC',u'分析流程',u'vcf']]
        d6[[u'批次', u'样本编号', u'样本ID', u'策略', u'姓名', u'性别', u'年龄',u'样本间关系', u'申请科室',u'exp_reads',u'exp_bases(Mb)', u'exp_Q30', u'exp_浓度(ng/ul)', u'exp_体积(ul)',u'exp_质量(ug)', u'exp_OD260/OD280', u'exp_OD260/OD230', u'exp_QC结论',u'ana_qc_comment',u'ana_pepline', u'ana_vcf']] = d5[[u'批次', u'样本编号', u'样本ID', u'策略', u'姓名', u'性别', u'年龄',u'样本间关系', u'申请科室',u'Reads',u'bases(Gb)',u'Q30',u'浓度(ng/ul)',u'体积(ul)',u'质量(ug)',u'OD260/OD280',u'OD260/OD230',u'QC',u'QC',u'分析流程',u'vcf']]
        d6.index = d1.index
        d6[u'家系关系'] = None
        d6[u'家系关系'] = d1[u'家系关系']
        d6[[u'process_送样日期', u'process_上机日期', u'process_下机日期']] = d1[[u'收样日期', u'上机日期',u'下机日期']]
        d6[[u'ana_coverage1X(%)',u'ana_coverage20X(%)', u'ana_avg_depth(X)', u'ana_duplication(%)']] = d2[[u'1Xcov', u'20Xcov', u'AvgDepth', u'duplication']]
        d6[[u'ana_indel(genomic)', u'ana_snp(genomic)', u'ana_ts/tv(genomic)',u'ana_snp(exonic)', u'ana_ts/tv(exonic)']] = d3[[u'indel_genomic', u'snp_genomic', u'ts/tv_genomic',u'snp_exonic', u'ts/tv_exonic']]
        d6[u'ana_annotation'] = u'v3.0'
        d6[u'ana_reporter'] = u'吕珊珊'
        d6[u'bk_rawdata'] = u'/anaData/anaData004/children_hos_genetic/rawdata/2018/'+strategy+'/'
        dirname = u'/DATA/BPshare/opm/遗传病-交大附属儿医/2018/'+'/'.join(os.getcwd().split('/')[-2:])
        print dirname
        dirname_truth = raw_input('Is the dirname correct? If not, please enter the correct dirname of the bk_reports:')
        if dirname_truth != '':
            dirname = dirname_truth
        #d6[u'bk_reports'] = u'/DATA/BPshare/opm/遗传病-交大附属儿医/2018/'+dirname
        d6[u'bk_reports'] = dirname
        
        #d6[u'家系关系'] = ped_relation
        
        if 'tmp' in sn:
            ofile = sn.split(seperator[list.index(sn)])[0]+'navicat'+sn.split(seperator[list.index(sn)])[1][:-4]
        else:
            ofile = infile.split(seperator[list.index(sn)])[0]+'navicat'+infile.split(seperator[list.index(sn)])[1]
        wb=pd.ExcelWriter(ofile, engine='openpyxl')
        d6.to_excel(wb,index=False)
        wb.save()
